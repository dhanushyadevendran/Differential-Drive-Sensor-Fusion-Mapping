<?xml version="1.0"?>
<robot name="differential_drive_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Constants -->
  <xacro:property name="pi_const" value="3.14159265"/>

  <!-- Body Dimensions -->
  <xacro:property name="a" value="1"/>
  <xacro:property name="b" value="0.3"/>
  <xacro:property name="c" value="0.6"/>

  <!-- Wheel & caster radius and diameter -->
  <xacro:property name="r" value="0.15"/>
  <xacro:property name="d" value="0.1"/>

  <xacro:property name="s1" value="${b/2}"/>
  <xacro:property name="s2" value="${2*r}"/>
  <xacro:property name="s3" value="${c/2 + d/2}"/>
  <xacro:property name="s4" value="${2*r}"/>

  <!-- Density -->
  <xacro:property name="d1" value="2710.0"/>
  <xacro:property name="d2" value="2710.0"/>
  <xacro:property name="d3" value="2710.0"/>

  <!-- Mass -->
  <xacro:property name="m1" value="${d1*a*b*c}"/>
  <xacro:property name="m2" value="${d2*pi_const*r*r*d}"/>
  <xacro:property name="m3" value="${d3*(4.0/3.0)*pi_const*r*r*r}"/>

  <!-- Moment of Inertia - body -->
  <xacro:property name="Ix_body" value="${(1/12)*m1*(b*b+c*c)}"/>
  <xacro:property name="Iy_body" value="${(1/12)*m1*(a*a+b*b)}"/>
  <xacro:property name="Iz_body" value="${(1/12)*m1*(a*a+c*c)}"/>

  <!-- Moment of Inertia - wheel -->
  <xacro:property name="Iz_wheel" value="${0.5*m2*r*r}"/>
  <xacro:property name="I_wheel" value="${(1.0/12.0)*m2*(3.0*r*r + d*d)}"/>

  <!-- Moment of Inertia - caster -->
  <xacro:property name="I_caster" value="${(2.0/5.0)*m3*r*r}"/>

  <!-- Inertial Macros -->
  <xacro:macro name="inertia_body">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="${m1}"/>
      <inertia ixx="${Ix_body}" ixy="0" ixz="0" iyy="${Iy_body}" iyz="0" izz="${Iz_body}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="inertia_wheel">
    <inertial>
      <origin rpy="1.570795 0 0" xyz="0 0 0"/>
      <mass value="${m2}"/>
      <inertia ixx="${I_wheel}" ixy="0" ixz="0" iyy="${I_wheel}" iyz="0" izz="${Iz_wheel}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="inertia_caster">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="${m3}"/>
      <inertia ixx="${I_caster}" ixy="0" ixz="0" iyy="${I_caster}" iyz="0" izz="${I_caster}"/>
    </inertial>
  </xacro:macro>

  <!-- Sensor inertial macro -->
  <xacro:macro name="inertia_sensor" params="mass">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="${mass}"/>
      <inertia ixx="${mass*0.01}" ixy="0" ixz="0" iyy="${mass*0.01}" iyz="0" izz="${mass*0.01}"/>
    </inertial>
  </xacro:macro>

  <!-- Base -->
  <link name="base_footprint"/>
  
  <!-- Base link for proper TF tree - positioned at wheel height -->
  <link name="base_link"/>
  
  <joint name="base_link_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin xyz="0 0 ${r}" rpy="0 0 0"/>
  </joint>

  <!-- Body - positioned so bottom is at wheel height -->
  <link name="body_link">
    <visual>
      <geometry>
        <box size="${a} ${c} ${b}"/>
      </geometry>
      <origin xyz="0 0 ${s1}" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <box size="${a} ${c} ${b}"/>
      </geometry>
      <origin xyz="0 0 ${s1}" rpy="0 0 0"/>
    </collision>
    <xacro:inertia_body/>
  </link>

  <joint name="body_link_joint" type="fixed">
    <parent link="base_link"/>
    <child link="body_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <!-- Wheels - positioned at ground level (0 height relative to base_link) -->
  <link name="wheel1_link">
    <visual>
      <geometry>
        <cylinder radius="${r}" length="${d}"/>
      </geometry>
      <origin xyz="0 0 0" rpy="1.570795 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="${r}" length="${d}"/>
      </geometry>
      <origin xyz="0 0 0" rpy="1.570795 0 0"/>
    </collision>
    <xacro:inertia_wheel/>
  </link>

  <link name="wheel2_link">
    <visual>
      <geometry>
        <cylinder radius="${r}" length="${d}"/>
      </geometry>
      <origin xyz="0 0 0" rpy="1.570795 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="${r}" length="${d}"/>
      </geometry>
      <origin xyz="0 0 0" rpy="1.570795 0 0"/>
    </collision>
    <xacro:inertia_wheel/>
  </link>

  <joint name="wheel1_joint" type="continuous">
    <parent link="base_link"/>
    <child link="wheel1_link"/>
    <origin xyz="-0.3 -0.2 0" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort="500000" velocity="10" />
    <dynamics damping="1.0" friction="1.0" />
  </joint>

  <joint name="wheel2_joint" type="continuous">
    <parent link="base_link"/>
    <child link="wheel2_link"/>
    <origin xyz="-0.3 0.2 0" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort="500000" velocity="10" />
    <dynamics damping="1.0" friction="1.0" />
  </joint>

  <!-- Caster - positioned at ground level -->
  <link name="caster_link">
    <visual>
      <geometry>
        <sphere radius="${r}"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <sphere radius="${r}"/>
      </geometry>
    </collision>
    <xacro:inertia_caster/>
  </link>

  <joint name="caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="caster_link"/>
    <origin xyz="0.3 0 0" rpy="0 0 0"/>
  </joint>

  <!-- LiDAR Sensor -->
  <link name="laser_link">
    <visual>
      <geometry>
        <cylinder radius="0.05" length="0.04"/>
      </geometry>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="0.05" length="0.04"/>
      </geometry>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </collision>
    <xacro:inertia_sensor mass="0.1"/>
  </link>

  <joint name="laser_joint" type="fixed">
    <parent link="body_link"/>
    <child link="laser_link"/>
    <origin xyz="0.4 0 ${s1 + b/2 + 0.02}" rpy="0 0 0"/>
  </joint>

  <!-- Camera Link -->
  <link name="camera_link">
    <visual>
      <geometry>
        <box size="0.05 0.08 0.03"/>
      </geometry>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <material name="blue">
        <color rgba="0 0 1 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.08 0.03"/>
      </geometry>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </collision>
    <xacro:inertia_sensor mass="0.05"/>
  </link>

  <joint name="camera_joint" type="fixed">
    <parent link="body_link"/>
    <child link="camera_link"/>
    <origin xyz="0.45 0 ${s1 + b/2 - 0.1}" rpy="0 0 0"/>
  </joint>

  <!-- Camera Optical Frame (for proper image orientation) -->
  <link name="camera_optical_link"/>
  
  <joint name="camera_optical_joint" type="fixed">
    <parent link="camera_link"/>
    <child link="camera_optical_link"/>
    <origin xyz="0 0 0" rpy="-1.570795 0 -1.570795"/>
  </joint>

  <!-- IMU Sensor Link -->
  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.02 0.02 0.01"/>
      </geometry>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <material name="green">
        <color rgba="0 1 0 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.02 0.02 0.01"/>
      </geometry>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </collision>
    <xacro:inertia_sensor mass="0.01"/>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="body_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 ${s1 + b/2}" rpy="0 0 0"/>
  </joint>

  <!-- Gazebo friction / visuals for main links -->
  <gazebo reference="body_link">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <material>Gazebo/Red</material>
  </gazebo>

  <gazebo reference="wheel1_link">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <material>Gazebo/Yellow</material>
  </gazebo>

  <gazebo reference="wheel2_link">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <material>Gazebo/Yellow</material>
  </gazebo>

  <gazebo reference="caster_link">
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <material>Gazebo/Blue</material>
  </gazebo>

  <gazebo reference="laser_link">
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="camera_link">
    <material>Gazebo/Blue</material>
  </gazebo>

  <gazebo reference="imu_link">
    <material>Gazebo/Green</material>
  </gazebo>

  <!-- Differential drive plugin -->
  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <ros>
        <namespace>/</namespace>
        <remapping>cmd_vel:=cmd_vel</remapping>
        <remapping>odom:=wheel_odom</remapping>
      </ros>

      <update_rate>50</update_rate>

      <!-- Correct joint tags -->
      <left_joint>wheel1_joint</left_joint>
      <right_joint>wheel2_joint</right_joint>

      <!-- Kinematics -->
      <wheel_separation>0.4</wheel_separation>
      <wheel_diameter>0.3</wheel_diameter>

      <max_wheel_torque>200</max_wheel_torque>
      <max_wheel_acceleration>10.0</max_wheel_acceleration>

      <publish_odom>true</publish_odom>
      <publish_odom_tf>false</publish_odom_tf>
      <publish_wheel_tf>false</publish_wheel_tf>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>
  </gazebo>

  <!-- LiDAR Plugin -->
  <gazebo reference="laser_link">
    <sensor type="ray" name="laser_scanner">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle>3.14159</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_laser" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>laser_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Camera Plugin -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <ros>
          <remapping>image_raw:=camera/image_raw</remapping>
          <remapping>camera_info:=camera/camera_info</remapping>
        </ros>
        <camera_name>camera</camera_name>
        <frame_name>camera_optical_link</frame_name>
        <hack_baseline>0.07</hack_baseline>
      </plugin>
    </sensor>
  </gazebo>

  <!-- IMU Plugin -->
  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <remapping>~/out:=imu/data</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

</robot>
<!-- rm -rf build/ install/ log/
colcon build
source install/setup.bash
ros2 launch mobile_robot gazebo_model.launch.py  -->
